name: Deploy to Amazon ECS
on:
  push:
    branches:
      - "main"
  workflow_dispatch:

# secrets:
#   DOCKER_HUB_USERNAME: 
#   DOCKER_HUB_PASSWORD: 
#   AWS_ACCESS_KEY_ID:
#   AWS_SECRET_ACCESS_KEY:
#   

env:
  IMAGE_NAME: novo-notes
  AWS_REGION: us-east-1                          
  ECS_SERVICE: arn:aws:ecs:eu-north-1:381492012543:service/novo-notes-cluster/novo-notes-service           
  ECS_CLUSTER: arn:aws:ecs:eu-north-1:381492012543:cluster/goals-cluster             
  ECS_TASK_DEFINITION: aws/td.json 
  CONTAINER_IMAGE: jakiscwaniak/novo-notes
  CONTAINER_NAME: novo-notes
  
defaults:
  run:
    shell: bash
jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    steps:
        - name: Checkout
          uses: actions/checkout@v2
        - name: Login to Docker Hub
          uses: docker/login-action@v2
          with:
            username: ${{ secrets.DOCKER_HUB_USERNAME }}
            password: ${{ secrets.DOCKER_HUB_PASSWORD }}
        - name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v2
        - name: Build and push
          uses: docker/build-push-action@v4
          with:
            context: .
            file: ./Dockerfile
            push: true
            tags: ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest
        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@v1
          with:
              aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
              aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
              aws-region: ${{ env.AWS_REGION }}
        - name: Fill in the new image ID in the Amazon ECS task definition
          id: task-def
          uses: aws-actions/amazon-ecs-render-task-definition@v1
          with:
              task-definition: ${{ env.ECS_TASK_DEFINITION }}
              container-name: ${{ env.CONTAINER_NAME }}
              image: ${{ env.CONTAINER_IMAGE }}
        - name: Deploy Amazon ECS task definition
          uses: aws-actions/amazon-ecs-deploy-task-definition@v1
          with:
              task-definition: ${{ steps.task-def.outputs.task-definition }}
              service: ${{ env.ECS_SERVICE }}
              cluster: ${{ env.ECS_CLUSTER }}
              wait-for-service-stability: true